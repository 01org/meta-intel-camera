From 1bc656c070b3abf17807412f0dc24ad739eb5cd6 Mon Sep 17 00:00:00 2001
From: Sakari Ailus <sakari.ailus@linux.intel.com>
Date: Fri, 20 Dec 2013 16:49:02 +0200
Subject: [PATCH 12/19] v4l: Add sub-stream mask id for buffer type

To support multiple sub-streams on a single video node (and DMA engine),
allow multiplexing the (buffer) type field on the structs it is present. Add
a flag to struct video_device to tell that a driver support sub-streams
which is off by default, and take the flag into account in check_fmt().

Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
---
 drivers/media/v4l2-core/v4l2-ioctl.c | 170 +++++++++++++++++++++++------------
 include/media/v4l2-dev.h             |   2 +
 include/uapi/linux/videodev2.h       |   4 +
 3 files changed, 120 insertions(+), 56 deletions(-)

diff --git a/drivers/media/v4l2-core/v4l2-ioctl.c b/drivers/media/v4l2-core/v4l2-ioctl.c
index 7486af2..c0bb574 100644
--- a/drivers/media/v4l2-core/v4l2-ioctl.c
+++ b/drivers/media/v4l2-core/v4l2-ioctl.c
@@ -38,6 +38,10 @@
 
 #define is_valid_ioctl(vfd, cmd) test_bit(_IOC_NR(cmd), (vfd)->valid_ioctls)
 
+#define v4l2_buf_type_type(type) ((type) & V4L2_BUF_TYPE_TYPE_MASK)
+#define v4l2_buf_type_substream(type) (((type) & V4L2_BUF_TYPE_SUBSTREAM_MASK) \
+				       >> V4L2_BUF_TYPE_SUBSTREAM_SHIFT)
+
 struct std_descr {
 	v4l2_std_id std;
 	const char *descr;
@@ -185,10 +189,11 @@ static void v4l_print_enuminput(const void *arg, bool write_only)
 {
 	const struct v4l2_input *p = arg;
 
-	pr_cont("index=%u, name=%.*s, type=%u, audioset=0x%x, tuner=%u, "
-		"std=0x%08Lx, status=0x%x, capabilities=0x%x\n",
-		p->index, (int)sizeof(p->name), p->name, p->type, p->audioset,
-		p->tuner, (unsigned long long)p->std, p->status,
+	pr_cont("index=%u, name=%.*s, type=%u, substream=%u, audioset=0x%x, "
+		"tuner=%u, std=0x%08Lx, status=0x%x, capabilities=0x%x\n",
+		p->index, (int)sizeof(p->name), p->name,
+		v4l2_buf_type_type(p->type), v4l2_buf_type_substream(p->type),
+		p->audioset, p->tuner, (unsigned long long)p->std, p->status,
 		p->capabilities);
 }
 
@@ -196,10 +201,12 @@ static void v4l_print_enumoutput(const void *arg, bool write_only)
 {
 	const struct v4l2_output *p = arg;
 
-	pr_cont("index=%u, name=%.*s, type=%u, audioset=0x%x, "
+	pr_cont("index=%u, name=%.*s, type=%u, substream=%u, audioset=0x%x, "
 		"modulator=%u, std=0x%08Lx, capabilities=0x%x\n",
-		p->index, (int)sizeof(p->name), p->name, p->type, p->audioset,
-		p->modulator, (unsigned long long)p->std, p->capabilities);
+		p->index, (int)sizeof(p->name), p->name,
+		v4l2_buf_type_type(p->type), v4l2_buf_type_substream(p->type),
+		p->audioset, p->modulator, (unsigned long long)p->std,
+		p->capabilities);
 }
 
 static void v4l_print_audio(const void *arg, bool write_only)
@@ -230,8 +237,11 @@ static void v4l_print_fmtdesc(const void *arg, bool write_only)
 {
 	const struct v4l2_fmtdesc *p = arg;
 
-	pr_cont("index=%u, type=%s, flags=0x%x, pixelformat=%c%c%c%c, description='%.*s'\n",
-		p->index, prt_names(p->type, v4l2_type_names),
+	pr_cont("index=%u, type=%s, substream=%u, flags=0x%x, "
+		"pixelformat=%c%c%c%c, description='%.*s'\n",
+		p->index, prt_names(v4l2_buf_type_type(p->type),
+				    v4l2_type_names),
+		v4l2_buf_type_substream(p->type),
 		p->flags, (p->pixelformat & 0xff),
 		(p->pixelformat >>  8) & 0xff,
 		(p->pixelformat >> 16) & 0xff,
@@ -250,8 +260,10 @@ static void v4l_print_format(const void *arg, bool write_only)
 	const struct v4l2_sdr_format *sdr;
 	unsigned i;
 
-	pr_cont("type=%s", prt_names(p->type, v4l2_type_names));
-	switch (p->type) {
+	pr_cont("type=%s, substream=%u", prt_names(v4l2_buf_type_type(p->type),
+						   v4l2_type_names),
+		v4l2_buf_type_substream(p->type));
+	switch (v4l2_buf_type_type(p->type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
 		pix = &p->fmt.pix;
@@ -357,7 +369,8 @@ static void v4l_print_framebuffer(const void *arg, bool write_only)
 
 static void v4l_print_buftype(const void *arg, bool write_only)
 {
-	pr_cont("type=%s\n", prt_names(*(u32 *)arg, v4l2_type_names));
+	pr_cont("type=%s\n", prt_names(v4l2_buf_type_type(*(u32 *)arg),
+				       v4l2_type_names));
 }
 
 static void v4l_print_modulator(const void *arg, bool write_only)
@@ -380,10 +393,12 @@ static void v4l_print_tuner(const void *arg, bool write_only)
 	if (write_only)
 		pr_cont("index=%u, audmode=%u\n", p->index, p->audmode);
 	else
-		pr_cont("index=%u, name=%.*s, type=%u, capability=0x%x, "
-			"rangelow=%u, rangehigh=%u, signal=%u, afc=%d, "
-			"rxsubchans=0x%x, audmode=%u\n",
-			p->index, (int)sizeof(p->name), p->name, p->type,
+		pr_cont("index=%u, name=%.*s, type=%u, substream %u, "
+			"capability=0x%x, rangelow=%u, rangehigh=%u, "
+			"signal=%u, afc=%d, rxsubchans=0x%x, audmode=%u\n",
+			p->index, (int)sizeof(p->name), p->name,
+			v4l2_buf_type_type(p->type),
+			v4l2_buf_type_substream(p->type),
 			p->capability, p->rangelow,
 			p->rangehigh, p->signal, p->afc,
 			p->rxsubchans, p->audmode);
@@ -393,8 +408,9 @@ static void v4l_print_frequency(const void *arg, bool write_only)
 {
 	const struct v4l2_frequency *p = arg;
 
-	pr_cont("tuner=%u, type=%u, frequency=%u\n",
-				p->tuner, p->type, p->frequency);
+	pr_cont("tuner=%u, type=%u, substream=%u, frequency=%u\n",
+		p->tuner, v4l2_buf_type_type(p->type),
+		v4l2_buf_type_substream(p->type), p->frequency);
 }
 
 static void v4l_print_standard(const void *arg, bool write_only)
@@ -418,19 +434,21 @@ static void v4l_print_hw_freq_seek(const void *arg, bool write_only)
 {
 	const struct v4l2_hw_freq_seek *p = arg;
 
-	pr_cont("tuner=%u, type=%u, seek_upward=%u, wrap_around=%u, spacing=%u, "
-		"rangelow=%u, rangehigh=%u\n",
-		p->tuner, p->type, p->seek_upward, p->wrap_around, p->spacing,
-		p->rangelow, p->rangehigh);
+	pr_cont("tuner=%u, type=%u, substream=%u, seek_upward=%u, "
+		"wrap_around=%u, spacing=%u, rangelow=%u, rangehigh=%u\n",
+		p->tuner, v4l2_buf_type_type(p->type),
+		v4l2_buf_type_substream(p->type), p->seek_upward,
+		p->wrap_around, p->spacing, p->rangelow, p->rangehigh);
 }
 
 static void v4l_print_requestbuffers(const void *arg, bool write_only)
 {
 	const struct v4l2_requestbuffers *p = arg;
 
-	pr_cont("count=%d, type=%s, memory=%s\n",
+	pr_cont("count=%d, type=%s, substream=%u, memory=%s\n",
 		p->count,
-		prt_names(p->type, v4l2_type_names),
+		prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+		v4l2_buf_type_substream(p->type),
 		prt_names(p->memory, v4l2_memory_names));
 }
 
@@ -441,18 +459,20 @@ static void v4l_print_buffer(const void *arg, bool write_only)
 	const struct v4l2_plane *plane;
 	int i;
 
-	pr_cont("%02ld:%02d:%02d.%08ld index=%d, type=%s, "
+	pr_cont("%02ld:%02d:%02d.%08ld index=%d, type=%s, stream=%u, "
 		"flags=0x%08x, field=%s, sequence=%d, memory=%s",
 			p->timestamp.tv_sec / 3600,
 			(int)(p->timestamp.tv_sec / 60) % 60,
 			(int)(p->timestamp.tv_sec % 60),
 			(long)p->timestamp.tv_usec,
 			p->index,
-			prt_names(p->type, v4l2_type_names),
+			prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+			v4l2_buf_type_substream(p->type),
 			p->flags, prt_names(p->field, v4l2_field_names),
 			p->sequence, prt_names(p->memory, v4l2_memory_names));
 
-	if (V4L2_TYPE_IS_MULTIPLANAR(p->type) && p->m.planes) {
+	if (V4L2_TYPE_IS_MULTIPLANAR(v4l2_buf_type_type(p->type)) &&
+	    p->m.planes) {
 		pr_cont("\n");
 		for (i = 0; i < p->length; ++i) {
 			plane = &p->m.planes[i];
@@ -477,9 +497,11 @@ static void v4l_print_exportbuffer(const void *arg, bool write_only)
 {
 	const struct v4l2_exportbuffer *p = arg;
 
-	pr_cont("fd=%d, type=%s, index=%u, plane=%u, flags=0x%08x\n",
-		p->fd, prt_names(p->type, v4l2_type_names),
-		p->index, p->plane, p->flags);
+	pr_cont("fd=%d, type=%s, substream=%u, index=%u, plane=%u, "
+		"flags=0x%08x\n",
+		p->fd, prt_names(v4l2_buf_type_type(p->type),
+				 v4l2_type_names),
+		v4l2_buf_type_substream(p->type), p->index, p->plane, p->flags);
 }
 
 static void v4l_print_create_buffers(const void *arg, bool write_only)
@@ -495,11 +517,13 @@ static void v4l_print_create_buffers(const void *arg, bool write_only)
 static void v4l_print_streamparm(const void *arg, bool write_only)
 {
 	const struct v4l2_streamparm *p = arg;
+	u32 buf_type = v4l2_buf_type_type(p->type);
 
-	pr_cont("type=%s", prt_names(p->type, v4l2_type_names));
+	pr_cont("type=%s, substream=%u", prt_names(buf_type, v4l2_type_names),
+		v4l2_buf_type_substream(p->type));
 
-	if (p->type == V4L2_BUF_TYPE_VIDEO_CAPTURE ||
-	    p->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
+	if (buf_type == V4L2_BUF_TYPE_VIDEO_CAPTURE ||
+	    buf_type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
 		const struct v4l2_captureparm *c = &p->parm.capture;
 
 		pr_cont(", capability=0x%x, capturemode=0x%x, timeperframe=%d/%d, "
@@ -507,8 +531,8 @@ static void v4l_print_streamparm(const void *arg, bool write_only)
 			c->capability, c->capturemode,
 			c->timeperframe.numerator, c->timeperframe.denominator,
 			c->extendedmode, c->readbuffers);
-	} else if (p->type == V4L2_BUF_TYPE_VIDEO_OUTPUT ||
-		   p->type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
+	} else if (buf_type == V4L2_BUF_TYPE_VIDEO_OUTPUT ||
+		   buf_type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
 		const struct v4l2_outputparm *c = &p->parm.output;
 
 		pr_cont(", capability=0x%x, outputmode=0x%x, timeperframe=%d/%d, "
@@ -582,10 +606,11 @@ static void v4l_print_cropcap(const void *arg, bool write_only)
 {
 	const struct v4l2_cropcap *p = arg;
 
-	pr_cont("type=%s, bounds wxh=%dx%d, x,y=%d,%d, "
+	pr_cont("type=%s, substream=%u, bounds wxh=%dx%d, x,y=%d,%d, "
 		"defrect wxh=%dx%d, x,y=%d,%d, "
 		"pixelaspect %d/%d\n",
-		prt_names(p->type, v4l2_type_names),
+		prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+		v4l2_buf_type_substream(p->type),
 		p->bounds.width, p->bounds.height,
 		p->bounds.left, p->bounds.top,
 		p->defrect.width, p->defrect.height,
@@ -597,8 +622,9 @@ static void v4l_print_crop(const void *arg, bool write_only)
 {
 	const struct v4l2_crop *p = arg;
 
-	pr_cont("type=%s, wxh=%dx%d, x,y=%d,%d\n",
-		prt_names(p->type, v4l2_type_names),
+	pr_cont("type=%s, substream=%u, wxh=%dx%d, x,y=%d,%d\n",
+		prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+		v4l2_buf_type_substream(p->type),
 		p->c.width, p->c.height,
 		p->c.left, p->c.top);
 }
@@ -607,8 +633,10 @@ static void v4l_print_selection(const void *arg, bool write_only)
 {
 	const struct v4l2_selection *p = arg;
 
-	pr_cont("type=%s, target=%d, flags=0x%x, wxh=%dx%d, x,y=%d,%d\n",
-		prt_names(p->type, v4l2_type_names),
+	pr_cont("type=%s, substream=%u, target=%d, flags=0x%x, wxh=%dx%d, "
+		"x,y=%d,%d\n",
+		prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+		v4l2_buf_type_substream(p->type),
 		p->target, p->flags,
 		p->r.width, p->r.height, p->r.left, p->r.top);
 }
@@ -847,7 +875,8 @@ static void v4l_print_sliced_vbi_cap(const void *arg, bool write_only)
 	int i;
 
 	pr_cont("type=%s, service_set=0x%08x\n",
-			prt_names(p->type, v4l2_type_names), p->service_set);
+		prt_names(v4l2_buf_type_type(p->type), v4l2_type_names),
+		p->service_set);
 	for (i = 0; i < 24; i++)
 		printk(KERN_DEBUG "line[%02u]=0x%04x, 0x%04x\n", i,
 				p->service_lines[0][i],
@@ -916,7 +945,21 @@ static int check_ext_ctrls(struct v4l2_ext_controls *c, int allow_priv)
 	return 1;
 }
 
-static int check_fmt(struct file *file, enum v4l2_buf_type type)
+static int check_buf_type(struct file *file, u32 type)
+{
+	struct video_device *vfd = video_devdata(file);
+
+	if (type & ~(V4L2_BUF_TYPE_TYPE_MASK | V4L2_BUF_TYPE_SUBSTREAM_MASK))
+		return -EINVAL;
+
+	if (!test_bit(V4L2_FL_HAS_SUB_STREAMS, &vfd->flags) &&
+	    v4l2_buf_type_substream(type))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int check_fmt(struct file *file, u32 type)
 {
 	struct video_device *vfd = video_devdata(file);
 	const struct v4l2_ioctl_ops *ops = vfd->ioctl_ops;
@@ -929,7 +972,10 @@ static int check_fmt(struct file *file, enum v4l2_buf_type type)
 	if (ops == NULL)
 		return -EINVAL;
 
-	switch (type) {
+	if (check_buf_type(file, type))
+		return -EINVAL;
+
+	switch (v4l2_buf_type_type(type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 		if (is_vid && is_rx &&
 		    (ops->vidioc_g_fmt_vid_cap || ops->vidioc_g_fmt_vid_cap_mplane))
@@ -1299,7 +1345,7 @@ static int v4l_enum_fmt(const struct v4l2_ioctl_ops *ops,
 	bool is_tx = vfd->vfl_dir != VFL_DIR_RX;
 	int ret = -EINVAL;
 
-	switch (p->type) {
+	switch (v4l2_buf_type_type(p->type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 		if (unlikely(!is_rx || !is_vid || !ops->vidioc_enum_fmt_vid_cap))
 			break;
@@ -1376,7 +1422,7 @@ static int v4l_g_fmt(const struct v4l2_ioctl_ops *ops,
 		break;
 	}
 
-	switch (p->type) {
+	switch (v4l2_buf_type_type(p->type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 		if (unlikely(!is_rx || !is_vid || !ops->vidioc_g_fmt_vid_cap))
 			break;
@@ -1450,7 +1496,7 @@ static int v4l_s_fmt(const struct v4l2_ioctl_ops *ops,
 
 	v4l_sanitize_format(p);
 
-	switch (p->type) {
+	switch (v4l2_buf_type_type(p->type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 		if (unlikely(!is_rx || !is_vid || !ops->vidioc_s_fmt_vid_cap))
 			break;
@@ -1534,7 +1580,7 @@ static int v4l_try_fmt(const struct v4l2_ioctl_ops *ops,
 
 	v4l_sanitize_format(p);
 
-	switch (p->type) {
+	switch (v4l2_buf_type_type(p->type)) {
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
 		if (unlikely(!is_rx || !is_vid || !ops->vidioc_try_fmt_vid_cap))
 			break;
@@ -1880,9 +1926,13 @@ static int v4l_g_parm(const struct v4l2_ioctl_ops *ops,
 		return ret;
 	if (ops->vidioc_g_parm)
 		return ops->vidioc_g_parm(file, fh, p);
-	if (p->type != V4L2_BUF_TYPE_VIDEO_CAPTURE &&
-	    p->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
+	switch (v4l2_buf_type_type(p->type)) {
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+	case V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE:
+		break;
+	default:
 		return -EINVAL;
+	}
 	p->parm.capture.readbuffers = 2;
 	ret = ops->vidioc_g_std(file, fh, &std);
 	if (ret == 0)
@@ -2084,7 +2134,7 @@ static int v4l_g_crop(const struct v4l2_ioctl_ops *ops,
 	/* simulate capture crop using selection api */
 
 	/* crop means compose for output devices */
-	if (V4L2_TYPE_IS_OUTPUT(p->type))
+	if (V4L2_TYPE_IS_OUTPUT(v4l2_buf_type_type(p->type)))
 		s.target = V4L2_SEL_TGT_COMPOSE_ACTIVE;
 	else
 		s.target = V4L2_SEL_TGT_CROP_ACTIVE;
@@ -2106,12 +2156,15 @@ static int v4l_s_crop(const struct v4l2_ioctl_ops *ops,
 		.r = p->c,
 	};
 
+	if (check_buf_type(file, p->type))
+		return -EINVAL;
+
 	if (ops->vidioc_s_crop)
 		return ops->vidioc_s_crop(file, fh, p);
 	/* simulate capture crop using selection api */
 
 	/* crop means compose for output devices */
-	if (V4L2_TYPE_IS_OUTPUT(p->type))
+	if (V4L2_TYPE_IS_OUTPUT(v4l2_buf_type_type(p->type)))
 		s.target = V4L2_SEL_TGT_COMPOSE_ACTIVE;
 	else
 		s.target = V4L2_SEL_TGT_CROP_ACTIVE;
@@ -2124,12 +2177,16 @@ static int v4l_cropcap(const struct v4l2_ioctl_ops *ops,
 {
 	struct v4l2_cropcap *p = arg;
 
+	if (check_buf_type(file, p->type))
+		return -EINVAL;
+
 	if (ops->vidioc_g_selection) {
-		struct v4l2_selection s = { .type = p->type };
+		struct v4l2_selection s =
+			{ .type = v4l2_buf_type_type(p->type) };
 		int ret;
 
 		/* obtaining bounds */
-		if (V4L2_TYPE_IS_OUTPUT(p->type))
+		if (V4L2_TYPE_IS_OUTPUT(v4l2_buf_type_type(p->type)))
 			s.target = V4L2_SEL_TGT_COMPOSE_BOUNDS;
 		else
 			s.target = V4L2_SEL_TGT_CROP_BOUNDS;
@@ -2140,7 +2197,7 @@ static int v4l_cropcap(const struct v4l2_ioctl_ops *ops,
 		p->bounds = s.r;
 
 		/* obtaining defrect */
-		if (V4L2_TYPE_IS_OUTPUT(p->type))
+		if (V4L2_TYPE_IS_OUTPUT(v4l2_buf_type_type(p->type)))
 			s.target = V4L2_SEL_TGT_COMPOSE_DEFAULT;
 		else
 			s.target = V4L2_SEL_TGT_CROP_DEFAULT;
@@ -2652,7 +2709,8 @@ static int check_array_args(unsigned int cmd, void *parg, size_t *array_size,
 	case VIDIOC_DQBUF: {
 		struct v4l2_buffer *buf = parg;
 
-		if (V4L2_TYPE_IS_MULTIPLANAR(buf->type) && buf->length > 0) {
+		if (V4L2_TYPE_IS_MULTIPLANAR(v4l2_buf_type_type(buf->type)) &&
+		    buf->length > 0) {
 			if (buf->length > VIDEO_MAX_PLANES) {
 				ret = -EINVAL;
 				break;
diff --git a/include/media/v4l2-dev.h b/include/media/v4l2-dev.h
index acbcd2f..8886970 100644
--- a/include/media/v4l2-dev.h
+++ b/include/media/v4l2-dev.h
@@ -44,6 +44,8 @@ struct v4l2_ctrl_handler;
 #define V4L2_FL_REGISTERED	(0)
 /* file->private_data points to struct v4l2_fh */
 #define V4L2_FL_USES_V4L2_FH	(1)
+/* Does the device support sub-streams? */
+#define V4L2_FL_HAS_SUB_STREAMS	(2)
 
 /* Priority helper functions */
 
diff --git a/include/uapi/linux/videodev2.h b/include/uapi/linux/videodev2.h
index 81bd32b..2ac17a7 100644
--- a/include/uapi/linux/videodev2.h
+++ b/include/uapi/linux/videodev2.h
@@ -150,6 +150,10 @@ enum v4l2_buf_type {
 	V4L2_BUF_TYPE_PRIVATE              = 0x80,
 };
 
+#define V4L2_BUF_TYPE_TYPE_MASK		0x000000ff
+#define V4L2_BUF_TYPE_SUBSTREAM_MASK	0x0000ff00
+#define V4L2_BUF_TYPE_SUBSTREAM_SHIFT	8
+
 #define V4L2_TYPE_IS_MULTIPLANAR(type)			\
 	((type) == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE	\
 	 || (type) == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
-- 
2.8.1

